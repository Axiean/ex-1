import { Product } from "@library/types";
import { createSlice, PayloadAction } from "@reduxjs/toolkit";

export interface CartItem extends Product {
  quantity: number;
}

interface BasketState {
  items: CartItem[];
}

const initialState: BasketState = {
  items: [],
};

interface UpdateQuantityPayload {
  id: number;
  quantity: number;
}

/**
 * @summary Redux slice for managing the shopping basket state.
 * @description This slice uses Redux Toolkit's `createSlice` to simplify reducer logic.
 * It leverages Immer internally, allowing for direct, "mutative" syntax in reducers
 * while ensuring state immutability. This slice handles all actions related to the
 * shopping cart, such as adding, removing, and updating items.
 */
export const basketSlice = createSlice({
  name: "basket",
  initialState,
  reducers: {
    /**
     * Adds a product to the basket. If the item already exists, its quantity is incremented.
     * Otherwise, a new item is added with a quantity of 1.
     */
    addToBasket: (state, action: PayloadAction<Product>) => {
      const itemInBasket = state.items.find(
        (item) => item.id === action.payload.id
      );
      if (itemInBasket) {
        itemInBasket.quantity++;
      } else {
        state.items.push({ ...action.payload, quantity: 1 });
      }
    },
    /**
     * Removes an item completely from the basket, identified by its ID.
     */
    removeFromBasket: (state, action: PayloadAction<number>) => {
      state.items = state.items.filter((item) => item.id !== action.payload);
    },
    /**
     * Updates the quantity of a specific item in the basket.
     */
    updateQuantity: (state, action: PayloadAction<UpdateQuantityPayload>) => {
      const itemInBasket = state.items.find(
        (item) => item.id === action.payload.id
      );
      if (itemInBasket) {
        itemInBasket.quantity = action.payload.quantity;
      }
    },
  },
});

// Export the action creators, which are automatically generated by `createSlice`.
export const { addToBasket, removeFromBasket, updateQuantity } =
  basketSlice.actions;

// Export the reducer to be included in the main store.
export default basketSlice.reducer;
